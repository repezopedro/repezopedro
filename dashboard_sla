import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import timedelta
import numpy as np
import os
import time
from pandas.tseries.offsets import BDay

# ==============================================================================
# 1. Configura√ß√µes Iniciais e Simula√ß√£o de Dados (para teste)
# ==============================================================================

# Configura√ß√£o da p√°gina do Streamlit
st.set_page_config(
    page_title="Dashboard de Performance de SLA de Pedidos | Supply Chain",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Paleta de cores inspirada em "Bioxxi" (Ciano/Verde e Cinza Profissional)
COLOR_PRIMARY = "#0065D1" # Azul Ciano
COLOR_SECONDARY = '#3CB371' # Verde Claro
COLOR_TEXT = '#2F4F4F' # Cinza Escuro (Slate Gray)
COLOR_FAIL = '#DC143C'  # Vermelho para falhas

# Fun√ß√£o auxiliar para simular o c√°lculo de dias √∫teis (Corrigida)
def add_business_days(date, days_to_add):
    """Calcula a data 'X' dias √∫teis ap√≥s a data inicial (excluindo S√°b/Dom)."""
    if pd.isna(date):
        return pd.NaT
    
    current_date = date
    while days_to_add > 0:
        current_date += timedelta(days=1)
        # 0=Segunda, 6=Domingo
        if current_date.weekday() < 5:  # Se n√£o for S√°bado (5) ou Domingo (6)
            days_to_add -= 1  
    return current_date

# Fun√ß√£o para carregar e preparar os dados
@st.cache_data(show_spinner="Carregando e processando dados de SLA...")
def load_data(file_path):
    """Carrega, filtra e prepara os dados da planilha Excel."""
    try:
        df = pd.read_excel(file_path, sheet_name='VIEW_PEDIDOS_SLA')
    except FileNotFoundError:
        st.error(f"Arquivo n√£o encontrado em: {file_path}. Por favor, verifique o caminho.")
        return None
    except ValueError:
        st.error("Planilha 'VIEW_PEDIDOS_SLA' n√£o encontrada no arquivo Excel.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar os dados: {e}")
        return None

    # 1. NORMALIZA√á√ÉO DE NOMES DE COLUNAS: MAI√öSCULAS e REMOVER ESPA√áOS
    df.columns = df.columns.str.strip().str.upper()

    # Vari√°vel de coluna cr√≠tica (usada em todos os c√°lculos CMEXX)
    COLUMN_CMEXX = 'DATA_APROVACAO_CMEXX'
    if COLUMN_CMEXX not in df.columns:
        st.error(f"‚ùå ERRO CR√çTICO: Coluna '{COLUMN_CMEXX}' n√£o encontrada.")
        st.warning(f"Nomes de Colunas Encontradas: {list(df.columns)}")
        return None

    # Convers√£o de Tipos de Dados Obrigat√≥ria (Usando nomes normalizados)
    date_cols = ['DTCRIACAO', 'DATACOMPETENCIA', 'DTAPROVACAO', 'DTAPROVACAOGERENCIA',
                 'DTIMPORTACAO', 'DATAEMISSAO', 'DTCONFIRMACAO', 'DTCONFIRMACAOSUPRIMENTOS',
                 COLUMN_CMEXX, 'DATA_PREVISTA_ENTREGA']
    
    # Colunas de ID e Categoria (tamb√©m normalizadas)
    id_cols = ['IDSOLICITACAO', 'NUMEROMOV', 'IDMOV', 'CENTRO_CUSTO', 'PEDIDO_EXTRA', 'STATUS_MOVIMENTO']
    
    # Converte Datas
    for col in date_cols:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
           
    # üö® Transforma√ß√£o da DATACOMPETENCIA para o Primeiro Dia √ötil do M√™s
    if 'DATACOMPETENCIA' in df.columns and not df['DATACOMPETENCIA'].empty:
        # 1. Encontra o primeiro dia do m√™s da DATACOMPETENCIA
        df['DATACOMPETENCIA_BASE'] = df['DATACOMPETENCIA'].dt.to_period('M').dt.start_time
        
        # 2. Aplica o offset BDay(0) para ajust√°-la ao primeiro dia √∫til.
        # Sobrescreve a coluna original com o novo prazo ajustado.
        df['DATACOMPETENCIA'] = df['DATACOMPETENCIA_BASE'] + BDay(0)
        
        # Opcional: Remove a coluna tempor√°ria
        df = df.drop(columns=['DATACOMPETENCIA_BASE'])
            
    # Converte IDs para String (para garantir 'nunique' correto em Pandas)
    for col in id_cols:
          if col in df.columns:
            df[col] = df[col].astype(str)

    # Exclus√£o de Pedidos Extras (Requisito)
    df = df[df['PEDIDO_EXTRA'] != 'S'].copy()

    # Cria√ß√£o de colunas auxiliares
    df['AnoCriacao'] = df['DTCRIACAO'].dt.year
    df['MesAnoCompetencia'] = df['DATACOMPETENCIA'].dt.to_period('M')

    # Garante coluna de M√™s/Ano de Cria√ß√£o baseada apenas em DTCRIACAO
    df['Data de Cria√ß√£o'] = df['DTCRIACAO'].dt.to_period('M').astype(str)

    # KPI 3: Ades√£o √† Cria√ß√£o Mensal (Corte Dia 20)
    df['DiaCriacao'] = df['DTCRIACAO'].dt.day
    df['DentroPrazoCorte'] = (df['DiaCriacao'] <= 20)

    # KPI 4: C√°lculo de SLA CMEXX (2 Dias √öteis ap√≥s DTCRIACAO)
    df['SLA_CMEXX_Lim'] = df.apply(
        lambda row: add_business_days(row['DTCRIACAO'], 2),
        axis=1
    )
    df['SLA_CMEXX_Cumprido'] = df[COLUMN_CMEXX] <= df['SLA_CMEXX_Lim']
    df['SLA_CMEXX_Cumprido'] = df['SLA_CMEXX_Cumprido'].fillna(False)

    # KPI 5: C√°lculo de SLA Importa√ß√£o (3 Dias √öteis ap√≥s DATA_APROVACAO_CMEXX)
    df['SLA_IMP_Lim'] = df.apply(
        lambda row: add_business_days(row[COLUMN_CMEXX], 3),
        axis=1
    )
    df['SLA_IMP_Cumprido'] = df['DTIMPORTACAO'] <= df['SLA_IMP_Lim']
    df['SLA_IMP_Cumprido'] = df['SLA_IMP_Cumprido'].fillna(False)

    # NOVO KPI DE ENTREGA (KPI 2) - Entrega no Prazo de Compet√™ncia
    df['Entregue_No_Prazo_Competencia'] = (df['DTCONFIRMACAOSUPRIMENTOS'] <= df['DATACOMPETENCIA']).fillna(False)

    return df

# Fun√ß√£o para gerar um DataFrame de exemplo caso o arquivo n√£o exista
def generate_sample_data(num_records: int = 120) -> pd.DataFrame:
    """Gera um DataFrame de exemplo compat√≠vel com o processamento do dashboard."""
    import random

    # Per√≠odo de cria√ß√£o: √∫ltimos 6 meses
    end = pd.Timestamp.today().normalize()
    start = (end - pd.offsets.MonthBegin(6)).normalize()

    rng = pd.date_range(start=start, end=end, periods=num_records)

    data = {
        'IDSOLICITACAO': [f'SOL-{i//3:04d}' for i in range(num_records)],
        'NUMEROMOV': [f'NMV-{i:05d}' for i in range(num_records)],
        'IDMOV': [f'IMV-{i:06d}' for i in range(num_records)],
        'CENTRO_CUSTO': [random.choice(['CC100','CC200','CC300']) for _ in range(num_records)],
        'COLIGADA': [random.choice(['COL1','COL2','COL3']) for _ in range(num_records)],
        'PEDIDO_EXTRA': [random.choice(['N','N','N','S']) for _ in range(num_records)],
        'STATUS_MOVIMENTO': [random.choice(['A','B','C']) for _ in range(num_records)],
        'DTCRIACAO': rng,
        # Compet√™ncia: usa o primeiro dia do m√™s de cria√ß√£o
        'DATACOMPETENCIA': [pd.Timestamp(d.year, d.month, 1) for d in rng],
        'DATAEMISSAO': rng - pd.to_timedelta(np.random.randint(0, 5, size=num_records), unit='d'),
        'DATA_PREVISTA_ENTREGA': rng + pd.to_timedelta(np.random.randint(3, 30, size=num_records), unit='d'),
        # Simula aprova√ß√£o CMEXX em 0-4 dias √∫teis ap√≥s cria√ß√£o
        'DATA_APROVACAO_CMEXX': [],
        # Simula data de importacao 0-6 dias √∫teis ap√≥s aprova√ß√£o
        'DTIMPORTACAO': [],
        # Confirma√ß√£o de suprimentos (pode ser NaT para alguns)
        'DTCONFIRMACAOSUPRIMENTOS': [] ,
        # Total (valor) para tabela
        'TOTAL': np.round(np.random.uniform(100.0, 5000.0, size=num_records), 2)
    }

    # Calcula DATA_APROVACAO_CMEXX e DTIMPORTACAO sequencialmente
    for d in rng:
        aprov = add_business_days(d, int(random.choice([0,1,1,2,3,4])))
        data['DATA_APROVACAO_CMEXX'].append(aprov)
        
        # 70% chance de ter importa√ß√£o em 0-4 dias √∫teis, sen√£o NaT
        if pd.isna(aprov) or random.random() < 0.15:
            data['DTIMPORTACAO'].append(pd.NaT)
        else:
            data['DTIMPORTACAO'].append(add_business_days(aprov, int(random.choice([0,1,1,2,3]))))

    # Preenche DTCONFIRMACAOSUPRIMENTOS e calcula cumprimento de Entrega
    df_temp = pd.DataFrame({'DTCRIACAO': data['DTCRIACAO'], 'DATACOMPETENCIA': data['DATACOMPETENCIA']})
    data['DTCONFIRMACAOSUPRIMENTOS'] = []
    
    for _, row in df_temp.iterrows():
        # 75% chance de ser entregue no prazo (antes do fim do m√™s de compet√™ncia)
        if random.random() < 0.75:
            data['DTCONFIRMACAOSUPRIMENTOS'].append(row['DATACOMPETENCIA'] - pd.to_timedelta(np.random.randint(1, 15), unit='d'))
        # 20% chance de ser entregue fora do prazo (depois do m√™s de compet√™ncia)
        elif random.random() < 0.95:
             data['DTCONFIRMACAOSUPRIMENTOS'].append(row['DATACOMPETENCIA'] + pd.to_timedelta(np.random.randint(1, 25), unit='d'))
        # 5% chance de ser NaT
        else:
            data['DTCONFIRMACAOSUPRIMENTOS'].append(pd.NaT)


    df = pd.DataFrame(data)

    # Normaliza colunas (simula o comportamento do load_data)
    df.columns = df.columns.str.strip().str.upper()

    # Garante tipos
    df['DTCRIACAO'] = pd.to_datetime(df['DTCRIACAO'], errors='coerce')
    df['DATACOMPETENCIA'] = pd.to_datetime(df['DATACOMPETENCIA'], errors='coerce')
    df['DATA_APROVACAO_CMEXX'] = pd.to_datetime(df['DATA_APROVACAO_CMEXX'], errors='coerce')
    df['DTIMPORTACAO'] = pd.to_datetime(df['DTIMPORTACAO'], errors='coerce')
    df['DATA_PREVISTA_ENTREGA'] = pd.to_datetime(df['DATA_PREVISTA_ENTREGA'], errors='coerce')
    df['DTCONFIRMACAOSUPRIMENTOS'] = pd.to_datetime(df['DTCONFIRMACAOSUPRIMENTOS'], errors='coerce')

    # Exclui pedidos extras (mant√©m consist√™ncia com load_data flows)
    df = df[df['PEDIDO_EXTRA'] != 'S'].copy()

    # Colunas derivadas
    df['AnoCriacao'] = df['DTCRIACAO'].dt.year
    df['MesAnoCompetencia'] = df['DATACOMPETENCIA'].dt.to_period('M')
    df['DiaCriacao'] = df['DTCRIACAO'].dt.day
    df['DentroPrazoCorte'] = (df['DiaCriacao'] <= 20)

    # Garantir coluna de M√™s/Ano de Cria√ß√£o baseada apenas em DTCRIACAO
    df['MesAnoCriacao_str'] = df['DTCRIACAO'].dt.to_period('M').astype(str)

    # SLA CMEXX limite e cumprimento
    df['SLA_CMEXX_Lim'] = df['DTCRIACAO'].apply(lambda d: add_business_days(d, 2) if not pd.isna(d) else pd.NaT)
    df['SLA_CMEXX_Cumprido'] = (df['DATA_APROVACAO_CMEXX'] <= df['SLA_CMEXX_Lim']).fillna(False)

    # SLA importa√ß√£o
    df['SLA_IMP_Lim'] = df['DATA_APROVACAO_CMEXX'].apply(lambda d: add_business_days(d, 2) if not pd.isna(d) else pd.NaT)
    df['SLA_IMP_Cumprido'] = (df['DTIMPORTACAO'] <= df['SLA_IMP_Lim']).fillna(False)

    # NOVO KPI DE ENTREGA (KPI 2) - Entrega no Prazo de Compet√™ncia
    df['Entregue_No_Prazo_Competencia'] = (df['DTCONFIRMACAOSUPRIMENTOS'] <= df['DATACOMPETENCIA']).fillna(False)


    # O nome da coluna de Corte deve estar em CamelCase como no load_data (corrigido)
    df = df.rename(columns={'DENTROPRAZOCORTE': 'DentroPrazoCorte'})

    return df

# ==============================================================================
# 2. Fun√ß√µes de C√°lculo das M√©tricas (KPIs)
# ==============================================================================

# ... (KPIs 3, 4, 5 mantidos) ...
def calculate_kpi_adesao_corte(df):
    """KPI 3: % de Pedidos Criados no Prazo de Corte (Dia 20) - Base IdSolicitacao."""
    if df.empty: return 0.0
    grouped = df.groupby('IDSOLICITACAO').first().reset_index()
    total_pedidos = grouped['IDSOLICITACAO'].nunique()
    pedidos_no_prazo = grouped[grouped['DentroPrazoCorte'] == True]['IDSOLICITACAO'].nunique()
    return (pedidos_no_prazo / total_pedidos) if total_pedidos > 0 else 0.0

def calculate_kpi_sla_cmexx(df):
    """KPI 4: % de Aprova√ß√µes CMEXX no Prazo (2 Dias √öteis) - Base IdSolicitacao."""
    if df.empty: return 0.0
    grouped = df.groupby('IDSOLICITACAO').first().reset_index()
    total_pedidos = grouped['IDSOLICITACAO'].nunique()
    pedidos_no_prazo = grouped[grouped['SLA_CMEXX_Cumprido'] == True]['IDSOLICITACAO'].nunique()
    return (pedidos_no_prazo / total_pedidos) if total_pedidos > 0 else 0.0

def calculate_kpi_sla_importacao(df):
    """KPI 5: % de Importa√ß√µes no Prazo (2 Dias √öteis) - Base IdSolicitacao."""
    if df.empty: return 0.0
    grouped = df.groupby('IDSOLICITACAO').first().reset_index()
    total_pedidos = grouped['IDSOLICITACAO'].nunique()
    pedidos_no_prazo = grouped[grouped['SLA_IMP_Cumprido'] == True]['IDSOLICITACAO'].nunique()
    return (pedidos_no_prazo / total_pedidos) if total_pedidos > 0 else 0.0

def calculate_kpi_entrega_competencia(df):
    """KPI 2 (Global): % de Pedidos Entregues no Prazo de Compet√™ncia - Base IdSolicitacao."""
    if df.empty: return 0.0
    grouped = df.groupby('IDSOLICITACAO').first().reset_index()
    total_pedidos = grouped['IDSOLICITACAO'].nunique()
    pedidos_no_prazo = grouped[grouped['Entregue_No_Prazo_Competencia'] == True]['IDSOLICITACAO'].nunique()
    return (pedidos_no_prazo / total_pedidos) if total_pedidos > 0 else 0.0


# --- FUN√á√ÉO PRINCIPAL DE GR√ÅFICO (KPI 2) - Corrigida para Bar Plot e Eixo Y (Cria√ß√£o) ---

def plot_kpi_entrega_competencia_monthly(df):
    """KPI 2: % de Pedidos Entregues no Prazo de Compet√™ncia (Gr√°fico de Barras)."""
    if df.empty:
        st.info("Nenhum dado para o per√≠odo selecionado.")
        return

    # 1. Agrupa por IDSOLICITACAO (para contagem distinta de pedidos)
    df_unique = df.groupby('IDSOLICITACAO').first().reset_index()
    
    # 2. Cria coluna de M√™s/Ano de COMPET√äNCIA para o EIXO X do gr√°fico (CORRE√á√ÉO AQUI)
    df_unique['MesAnoCompetencia_str'] = df_unique['DATACOMPETENCIA'].dt.to_period('M').astype(str)
    
    # 3. Agrupamento Final por M√™s de COMPET√äNCIA
    grouped_final = df_unique.groupby('MesAnoCompetencia_str').agg(
        Total_Pedidos=('IDSOLICITACAO', 'nunique'),
        Pedidos_No_Prazo=('Entregue_No_Prazo_Competencia', 'sum')
    ).reset_index().sort_values('MesAnoCompetencia_str')

    grouped_final['Pedidos_Fora_Prazo'] = grouped_final['Total_Pedidos'] - grouped_final['Pedidos_No_Prazo']
    grouped_final['Percentual_SLA'] = (grouped_final['Pedidos_No_Prazo'] / grouped_final['Total_Pedidos']) * 100
    grouped_final = grouped_final.fillna(0)

    # 4. Cria√ß√£o do Gr√°fico de Barras com meta de 95%
    fig = px.bar(
        grouped_final,
        x='MesAnoCompetencia_str',
        y='Percentual_SLA',
        title='KPI 2: % de Pedidos Entregues no Prazo de Compet√™ncia (SLA Objetivo: 95%)',
        text='Percentual_SLA',
        template="plotly_white",
        color_discrete_sequence=[COLOR_SECONDARY]
    )

    # Adiciona a linha de meta (Target: 95%)
    fig.add_hline(y=95, line_dash="dot", line_color="#FF4B4B", 
                  annotation_text="Meta (95%)", annotation_position="top right")

    # Formata√ß√£o
    fig.update_traces(
        texttemplate='%{text:.2f}%', 
        textposition='outside',
        hovertemplate='**M√™s/Ano Compet√™ncia:** %{x}<br>**% Entrega no Prazo:** %{y:.2f}%<extra></extra>'
    )
    fig.update_yaxes(title="Percentual (%)", tickformat=".0f", range=[0, 105])
    fig.update_xaxes(title="M√™s/Ano de Compet√™ncia")
    
    st.plotly_chart(fig, use_container_width=True)
    return grouped_final# Retorna os dados mensais para exibi√ß√£o de suporte


# --- NOVA FUN√á√ÉO PARA DETALHAMENTO DE FALHAS (KPI 2) ---

def get_pedidos_fora_prazo_entrega(df):
    """Retorna um DataFrame detalhado com pedidos que falharam no SLA de Entrega/Compet√™ncia."""
    if df.empty:
        return pd.DataFrame()

    # Filtra pedidos √∫nicos que N√ÉO cumpriram o prazo de compet√™ncia
    df_unique = df.groupby('IDSOLICITACAO').first().reset_index()
    df_falha = df_unique[df_unique['Entregue_No_Prazo_Competencia'] == False].copy()
    
    # Colunas √∫teis para o detalhamento
    cols_to_show = ['IDSOLICITACAO', 'NUMEROMOV', 'CENTRO_CUSTO', 'DTCRIACAO', 
                    'DATACOMPETENCIA', 'DTCONFIRMACAOSUPRIMENTOS', 'TOTAL']
    
    # Prepara o DataFrame para exibi√ß√£o
    df_falha = df_falha[[col for col in cols_to_show if col in df_falha.columns]]
    
    # Calcula a diferen√ßa para evid√™ncia (Atraso em Dias - Simplificado)
    df_falha['Atraso_Dias'] = (df_falha['DTCONFIRMACAOSUPRIMENTOS'] - df_falha['DATACOMPETENCIA']).dt.days
    
    return df_falha.sort_values('DTCRIACAO', ascending=False)


# --- FUN√á√ïES DE DETALHE DOS OUTROS KPIS (Mantidas) ---

def calculate_adesao_by_month(df):
    """Calcula o % de Pedidos Criados no Prazo de Corte (Dia 20) M√äS A M√äS."""
    if df.empty: return pd.DataFrame()
    df_unique = df.groupby('IDSOLICITACAO').first().reset_index()
    df_unique['MesAnoCriacao_str'] = df_unique['DTCRIACAO'].dt.to_period('M').astype(str)
    grouped = df_unique.groupby('MesAnoCriacao_str').agg(
        Total_Pedidos=('IDSOLICITACAO', 'nunique'),
        Pedidos_No_Prazo=('DentroPrazoCorte', 'sum')
    ).reset_index().sort_values('MesAnoCriacao_str')
    grouped['Percentual_Adesao'] = (grouped['Pedidos_No_Prazo'] / grouped['Total_Pedidos']) * 100
    return grouped.fillna(0)

def plot_adesao_by_month(df_monthly):
    """Gera o gr√°fico de linha para Ades√£o Mensal ao Prazo de Corte."""
    if df_monthly.empty: return
    fig = px.line(df_monthly,x='MesAnoCriacao_str',y='Percentual_Adesao',title='Ades√£o Mensal ao Prazo de Cria√ß√£o (Dia 20 de cada m√™s)',markers=True,template="plotly_white",color_discrete_sequence=[COLOR_SECONDARY])
    fig.update_traces(hovertemplate='**M√™s:** %{x}<br>**Ades√£o:** %{y:.2f}%<extra></extra>')
    fig.update_yaxes(title="Percentual (%)", tickformat=".0f", range=[0, 100])
    fig.update_xaxes(title="M√™s/Ano de Cria√ß√£o")
    st.plotly_chart(fig, use_container_width=True)

def calculate_sla_cmexx_by_month(df):
    """Calcula o % mensal de Aprova√ß√µes CMEXX dentro do SLA (2 dias √∫teis) por m√™s de cria√ß√£o."""
    if df.empty: return pd.DataFrame()
    df_unique = df.groupby('IDSOLICITACAO').first().reset_index()
    df_unique['MesAnoCriacao_str'] = df_unique['DTCRIACAO'].dt.to_period('M').astype(str)
    grouped = df_unique.groupby('MesAnoCriacao_str').agg(
        Total_Pedidos=('IDSOLICITACAO', 'nunique'),
        Aprovacoes_No_Prazo=('SLA_CMEXX_Cumprido', 'sum')
    ).reset_index().sort_values('MesAnoCriacao_str')
    grouped['Percentual_SLA_CMEXX'] = (grouped['Aprovacoes_No_Prazo'] / grouped['Total_Pedidos']) * 100
    return grouped.fillna(0)


def plot_sla_cmexx_by_month(df_monthly):
    """Plota a tend√™ncia mensal do SLA de Aprova√ß√£o CMEXX."""
    if df_monthly.empty: return
    fig = px.line(df_monthly,x='MesAnoCriacao_str',y='Percentual_SLA_CMEXX',title='Tend√™ncia Mensal: SLA de Aprova√ß√£o CMEXX (2 dias √∫teis)',markers=True,template="plotly_white",color_discrete_sequence=[COLOR_PRIMARY])
    fig.update_traces(hovertemplate='**M√™s:** %{x}<br>**SLA Aprova√ß√£o:** %{y:.2f}%<extra></extra>')
    fig.update_yaxes(title="Percentual (%)", tickformat=".0f", range=[0, 100])
    fig.update_xaxes(title="M√™s/Ano de Cria√ß√£o")
    st.plotly_chart(fig, use_container_width=True)


def calculate_sla_importacao_by_month(df):
    """Calcula o % mensal de Importa√ß√µes dentro do SLA (2 dias √∫teis) por m√™s de cria√ß√£o."""
    if df.empty: return pd.DataFrame()
    df_unique = df.groupby('IDSOLICITACAO').first().reset_index()
    df_unique['MesAnoCriacao_str'] = df_unique['DTCRIACAO'].dt.to_period('M').astype(str)
    grouped = df_unique.groupby('MesAnoCriacao_str').agg(
        Total_Pedidos=('IDSOLICITACAO', 'nunique'),
        Importacoes_No_Prazo=('SLA_IMP_Cumprido', 'sum')
    ).reset_index().sort_values('MesAnoCriacao_str')
    grouped['Percentual_SLA_Importacao'] = (grouped['Importacoes_No_Prazo'] / grouped['Total_Pedidos']) * 100
    return grouped.fillna(0)


def plot_sla_importacao_by_month(df_monthly):
    """Plota a tend√™ncia mensal do SLA de Importa√ß√£o."""
    if df_monthly.empty: return
    fig = px.line(df_monthly,x='MesAnoCriacao_str',y='Percentual_SLA_Importacao',title='Tend√™ncia Mensal: SLA de Importa√ß√£o (2 dias √∫teis ap√≥s Aprova√ß√£o CMEXX)',markers=True,template="plotly_white",color_discrete_sequence=['#FF7F50']) 
    fig.update_traces(hovertemplate='**M√™s:** %{x}<br>**SLA Importa√ß√£o:** %{y:.2f}%<extra></extra>')
    fig.update_yaxes(title="Percentual (%)", tickformat=".0f", range=[0, 100])
    fig.update_xaxes(title="M√™s/Ano de Cria√ß√£o")
    st.plotly_chart(fig, use_container_width=True)

# ==============================================================================
# 3. Layout e Execu√ß√£o do Dashboard
# ==============================================================================

def display_kpi_card(title, value, help_text=None, target_pct=None):
    """Exibe um Cart√£o de KPI formatado no Streamlit."""
    if help_text:
        st.markdown(f"<span style='font-size: 1em;'>**{title}**</span> <sup title='{help_text}' style='font-size: 0.7em;'>‚ìò</sup>", unsafe_allow_html=True)
    else:
        st.markdown(f"**{title}**")
        
    color = COLOR_TEXT
    if target_pct is not None:
        if value < target_pct:
            color = COLOR_FAIL # Vermelho se abaixo da meta
        else:
            color = COLOR_SECONDARY # Verde se acima ou igual √† meta
    
    st.markdown(f"<p style='font-size: 2em; color: {color}; margin-bottom: 0px;'>{value:.2%}</p>", unsafe_allow_html=True)
    st.markdown("---")


def main_dashboard():
    """Fun√ß√£o principal para montar o dashboard."""
    
    # Inicializa o estado da sess√£o para controle de tela
    if 'page' not in st.session_state:
        st.session_state.page = 'main'
    
    # DEFINI√á√ÉO DO CAMINHO DO ARQUIVO (ATUALIZADO)
    file_path = r'C:\Users\pedro.muniz\Documents\pythonlocal\BIOXXI\INDICADORESCMEXXFAB\CMEXXFAB_SQL.xlsx'
    
    # O Streamlit usa o cache, ent√£o a carga √© r√°pida se o arquivo n√£o mudar.
    if os.path.exists(file_path):
        df_base = load_data(file_path)
    else:
        st.warning(f"Arquivo n√£o encontrado no caminho: `{file_path}`. Usando dados de simula√ß√£o gerados localmente.")
        df_base = generate_sample_data()

    if df_base is None or df_base.empty:
        st.stop()
    
    # --- Sidebar de Filtros (KPI 1) --- (Mantido)
    st.sidebar.header("Filtros de An√°lise")
    all_years = sorted(df_base['AnoCriacao'].dropna().unique().astype(int).tolist(), reverse=True)
    
    if not all_years:
        st.sidebar.warning("Nenhum ano de cria√ß√£o encontrado nos dados v√°lidos.")
        st.stop()

    selected_years = st.sidebar.multiselect(
        "Selecione o(s) Ano(s) de Cria√ß√£o:",
        options=all_years,
        default=all_years[:2] if len(all_years) > 1 else all_years
    )

    if not selected_years:
        st.sidebar.warning("Selecione pelo menos um ano.")
        st.stop()

    df_filtered = df_base[df_base['AnoCriacao'].isin(selected_years)].copy()
    
    all_cc = sorted(df_base['CENTRO_CUSTO'].dropna().unique().tolist())
    selected_cc = st.sidebar.multiselect(
        "Filtro por Centro de Custo:",
        options=all_cc,
        default=[] 
    )
    
    if selected_cc:
        df_filtered = df_filtered[df_filtered['CENTRO_CUSTO'].isin(selected_cc)]
        
    # Filtro por Coligada (se existir na base)
    if 'COLIGADA' in df_base.columns:
        all_coligadas = sorted(df_base['COLIGADA'].dropna().unique().tolist())
        selected_coligadas = st.sidebar.multiselect(
            "Filtro por Coligada:",
            options=all_coligadas,
            default=[]
        )

        if selected_coligadas:
            df_filtered = df_filtered[df_filtered['COLIGADA'].isin(selected_coligadas)]
    # Filtro por UF
    if 'UF' in df_base.columns:
        # 1. Obt√©m todas as UFs √∫nicas
        all_ufs = sorted(df_base['UF'].dropna().unique().tolist())
        selected_ufs = st.sidebar.multiselect(
            "Filtro por UF:",
            options=all_ufs,
            default=all_ufs[:3] if len(all_ufs) > 3 else all_ufs
        )
        if selected_ufs:
            df_filtered = df_filtered[df_filtered['UF'].isin(selected_ufs)]
        else:

            
            # Se o usu√°rio desmarcar tudo, voc√™ pode querer n√£o filtrar ou exibir um aviso.
            # Aqui, mantemos o df_filtered sem o filtro de UF (comportamento padr√£o do Streamlit)
            pass        
    st.sidebar.info(f"Total de Pedidos na Vis√£o: **{df_filtered['IDSOLICITACAO'].nunique():,}**")
    
    # ------------------------------------
    
    # L√≥gica de Navega√ß√£o
    if st.session_state.page == 'main':
        st.title("Performance Entrega de Insumos")
        st.markdown(f"<span style='color:{COLOR_TEXT}; font-size: 0.9em;'>An√°lise de Efici√™ncia de Aprova√ß√£o, Importa√ß√£o e Entrega.</span>", unsafe_allow_html=True)
        st.markdown("---")
        
        # 1. Linha dos Cart√µes de KPI
        st.subheader("Indicadores Chave de SLA (Per√≠odo Filtrado)")
        col_kpi_entrega, col_kpi_criacao, col_kpi_aprovacao, col_kpi_importacao = st.columns(4)

        # KPI 2 (Entrega no Prazo de Compet√™ncia) - NOVO PRIMEIRO CARD
        kpi_entrega = calculate_kpi_entrega_competencia(df_filtered)
        with col_kpi_entrega:
            display_kpi_card(
                "SLA de Entrega | Suprimentos",
                kpi_entrega,
                help_text="Porcentagem de Pedidos (IdSolicitacao) entregues (DTCONFIRMACAOSUPRIMENTOS) no prazo de compet√™ncia (DATACOMPETENCIA). Meta: 95%.",
                target_pct=0.95
            )

        # KPI 3: Ades√£o √† Cria√ß√£o Mensal (Corte Dia 20)
        kpi_adesao = calculate_kpi_adesao_corte(df_filtered)
        with col_kpi_criacao:
            display_kpi_card(
                "SLA de Cria√ß√£o | Opera√ß√µes",
                kpi_adesao,
                help_text="Porcentagem de Pedidos (IdSolicitacao) criados at√© o dia 20 do m√™s de cria√ß√£o."
            )

        # KPI 4: SLA de Aprova√ß√£o CMEXX (2 Dias √öteis)
        kpi_cmexx = calculate_kpi_sla_cmexx(df_filtered)
        with col_kpi_aprovacao:
            display_kpi_card(
                "SLA de Aprova√ß√£o | Opera√ß√µes",
                kpi_cmexx,
                help_text="Porcentagem de Pedidos (IdSolicitacao) com aprova√ß√£o CMEXX em at√© 2 dias √∫teis da cria√ß√£o."
            )

        # KPI 5: SLA de Importa√ß√£o (2 Dias √öteis)
        kpi_importacao = calculate_kpi_sla_importacao(df_filtered)
        with col_kpi_importacao:
            display_kpi_card(
                "SLA de Importa√ß√£o | Suprimentos",
                kpi_importacao,
                help_text="Porcentagem de Pedidos (IdSolicitacao) com Importa√ß√£o em at√© 2 dias √∫teis da aprova√ß√£o CMEXX."
            )
            
        st.markdown("---") # Fim dos Cart√µes
        
        # 2. Gr√°fico de Tend√™ncia (KPI 2)
        st.subheader("Tend√™ncia Mensal: Entrega no Prazo de Compet√™ncia")
        
        # Plotagem do gr√°fico de barras (Calcula o DF interno)
        df_entrega_mensal = plot_kpi_entrega_competencia_monthly(df_filtered)
        
        col_detalhe_btn, col_resumo = st.columns([1, 2])
        
        with col_detalhe_btn:
             # BOT√ÉO PARA DETALHE DE FALHAS (KPI 2)
            if st.button('‚ùå Detalhamento | Pedidos Fora do Prazo', key='btn_detalhe_entrega', use_container_width=True, type='primary'):
                st.session_state.page = 'detalhe_entrega_prazo'
                st.rerun()

        with col_resumo:
            if not df_entrega_mensal.empty:
                # Exibe o total de pedidos fora do prazo no per√≠odo
                total_falhas = df_entrega_mensal['Pedidos_Fora_Prazo'].sum()
                st.info(f"Total de Solicita√ß√µes FORA do Prazo de Compet√™ncia no per√≠odo: **{total_falhas:,}**.")


        st.markdown("---")
        
        # 3. Gr√°ficos de Detalhe dos Outros KPIS
        
        st.subheader("Tend√™ncia Mensal: Detalhamento dos Processos Pr√©vios")
        col_detalhe_cria, col_detalhe_aprov, col_detalhe_imp = st.columns(3)
        
        with col_detalhe_cria:
            plot_adesao_by_month(calculate_adesao_by_month(df_filtered))
        
        with col_detalhe_aprov:
            plot_sla_cmexx_by_month(calculate_sla_cmexx_by_month(df_filtered))
            
        with col_detalhe_imp:
            plot_sla_importacao_by_month(calculate_sla_importacao_by_month(df_filtered))
            
        st.markdown("---")
        
        # 4. Tabela de Acompanhamento (KPI 6) - Mantida
        st.subheader("Acompanhamento Detalhado de Previs√£o de Entrega (√öltimos 500)")
        
        cols_table = ['IDSOLICITACAO', 'NUMEROMOV', 'CENTRO_CUSTO', 'DTCRIACAO', 'DATACOMPETENCIA',
                      'DTCONFIRMACAOSUPRIMENTOS', 'DATA_PREVISTA_ENTREGA', 'STATUS_MOVIMENTO', 'TOTAL']
        
        cols_to_display = [col for col in cols_table if col in df_filtered.columns]
        
        df_table = df_filtered.groupby('IDSOLICITACAO').first().reset_index()[cols_to_display].sort_values('DTCRIACAO', ascending=False).head(500)
        
        st.dataframe(
            df_table,
            use_container_width=True,
            hide_index=True,
            column_config={
                "TOTAL": st.column_config.NumberColumn("Total (R$)", format="R$ %.2f"),
                "DTCRIACAO": st.column_config.DateColumn("Cria√ß√£o", format="DD/MM/YYYY"),
                "DATACOMPETENCIA": st.column_config.DateColumn("Compet√™ncia", format="DD/MM/YYYY"),
                "DTCONFIRMACAOSUPRIMENTOS": st.column_config.DateColumn("Conf. Entrega", format="DD/MM/YYYY"),
                "DATA_PREVISTA_ENTREGA": st.column_config.DateColumn("Prev. Entrega", format="DD/MM/YYYY"),
            }
        )

        st.markdown("***")
        
    # --- Telas de Detalhe dos KPIS (Mantidas) ---

    elif st.session_state.page == 'detalhe_adesao':
        st.title("üîé Detalhe: Ades√£o Mensal ao Prazo para Cria√ß√£o (At√© o dia 20 de cada m√™s)")
        if st.button('‚¨ÖÔ∏è Voltar ao Dashboard Principal', key='btn_voltar_adesao', type='primary'):
            st.session_state.page = 'main'
            st.rerun()
        st.markdown("---")
        df_mensal = calculate_adesao_by_month(df_filtered)
        if not df_mensal.empty:
            plot_adesao_by_month(df_mensal)
            st.subheader("Dados de Suporte")
            df_display = df_mensal.copy()
            df_display['Percentual_Adesao'] = df_display['Percentual_Adesao'].apply(lambda x: f"{x:.2f}%")
            st.dataframe(df_display, use_container_width=True, hide_index=True)
        else:
            st.info("Nenhum dado encontrado.")

    elif st.session_state.page == 'detalhe_sla_cmexx':
        st.title("üîé Detalhe: SLA de Aprova√ß√£o CMEXX (2 dias √∫teis)")
        if st.button('‚¨ÖÔ∏è Voltar ao Dashboard Principal', key='btn_voltar_sla', type='primary'):
            st.session_state.page = 'main'
            st.rerun()
        st.markdown("---")
        df_mensal = calculate_sla_cmexx_by_month(df_filtered)
        if not df_mensal.empty:
            plot_sla_cmexx_by_month(df_mensal)
            st.subheader("Dados de Suporte - SLA Aprova√ß√£o")
            df_display = df_mensal.copy()
            df_display['Percentual_SLA_CMEXX'] = df_display['Percentual_SLA_CMEXX'].apply(lambda x: f"{x:.2f}%")
            st.dataframe(df_display, use_container_width=True, hide_index=True)
        else:
            st.info("Nenhum dado encontrado.")

    elif st.session_state.page == 'detalhe_sla_importacao':
        st.title("üîé Detalhe: SLA de Importa√ß√£o (2 dias √∫teis ap√≥s Aprova√ß√£o CMEXX)")
        if st.button('‚¨ÖÔ∏è Voltar ao Dashboard Principal', key='btn_voltar_imp', type='primary'):
            st.session_state.page = 'main'
            st.rerun()
        st.markdown("---")
        df_mensal = calculate_sla_importacao_by_month(df_filtered)
        if not df_mensal.empty:
            plot_sla_importacao_by_month(df_mensal)
            st.subheader("Dados de Suporte - SLA Importa√ß√£o")
            df_display = df_mensal.copy()
            df_display['Percentual_SLA_Importacao'] = df_display['Percentual_SLA_Importacao'].apply(lambda x: f"{x:.2f}%")
            st.dataframe(df_display, use_container_width=True, hide_index=True)
        else:
            st.info("Nenhum dado encontrado.")
            
    # --- NOVO BLOCO: Tela de Detalhe do KPI 2 (Entrega no Prazo de Compet√™ncia) ---
    elif st.session_state.page == 'detalhe_entrega_prazo':
        st.title("‚ùå Detalhe: Pedidos Fora do Prazo de Entrega/Compet√™ncia")
        st.markdown(f"Pedidos (IdSolicitacao) onde a Confirma√ß√£o de Entrega (`DTCONFIRMACAOSUPRIMENTOS`) foi **posterior** ao Prazo de Compet√™ncia (`DATACOMPETENCIA`).")

        # BOT√ÉO DE RETORNO
        if st.button('‚¨ÖÔ∏è Voltar ao Dashboard Principal', key='btn_voltar_det_entrega', type='primary'):
            st.session_state.page = 'main'
            st.rerun()

        st.markdown("---")

        # C√°lculo e Exibi√ß√£o do Detalhe
        df_falha = get_pedidos_fora_prazo_entrega(df_filtered)

        if not df_falha.empty:
            st.subheader(f"Total de Pedidos Fora do Prazo: {df_falha['IDSOLICITACAO'].nunique():,}")
            
            st.dataframe(
                df_falha,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "TOTAL": st.column_config.NumberColumn("Total (R$)", format="R$ %.2f"),
                    "DTCRIACAO": st.column_config.DateColumn("Cria√ß√£o", format="DD/MM/YYYY"),
                    "DATACOMPETENCIA": st.column_config.DateColumn("Compet√™ncia", format="DD/MM/YYYY"),
                    "DTCONFIRMACAOSUPRIMENTOS": st.column_config.DateColumn("Conf. Entrega", format="DD/MM/YYYY"),
                    "ATRASO_DIAS": st.column_config.NumberColumn("Atraso (Dias)", format="%d"),
                }
            )
        else:
            st.success("üéâ Todos os pedidos no per√≠odo filtrado foram entregues no prazo de compet√™ncia!")


if __name__ == '__main__':
    main_dashboard()
